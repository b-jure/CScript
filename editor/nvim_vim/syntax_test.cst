/*
** This file serves as a syntax showcase.
** It is useful for testing purposes when altering
** (n)vim syntax file provided with the distribution.
** 
** When modyfing the syntax file, do ':syn set=cst'
** to reload the syntax file.
*/


# Operators
!    ~                          # unary
+    -    **    *    /    %     # arithmetic
^    >>   <<    &    |          # bitwise
>    <    ==    !=   >=   <=    # ordering
or   and                        # logical


/*
** Multi-line comment
** TODO, XXX, FIXME
** @doctag
*/
# Single-line comment TODO, XXX, FIXME @doctag
*/ # comment error


# Special Characters (errors)
\e                              # escape
\\ \a \b \t \n \v \f \r \' \"   # control
\532                            # \ddd
\x15                            # \xhh
\u{ffffffff}                    # utf-8 (1-8 hex digits)
\u[ffffffff]                    # utf-8 strict (1-8 hex digits)


# String
"\escape, literal \\ backslash, \a bell,\
\backspace, \tab, \newline, \vertical tab,\
\form feed, carriage \return, literal \' apostrophe,\
literal \" double quotes, opening parenthesis \040,\
closing parenthesis \x29, exclamation mark \u{21},\
dollar sign \u[24]"


# Character Constant
'0',  '5',  '\\', '\a', '\b'  '\t',  '\n',
'\v', '\f', '\r', '\'', '\"', '\xff'


# Integers
0       5       63      -63     +63     691337   
0x0     0x5     0x3f    -0x3f   +0x3f   0xa8c89  
00      05      077     -077    +077    02506211
092     #octal error


# Floats
64.64     64e-21     64e+22     64.64e-23     64.64e+24     64.64e25
.15       -.15       +.15
0x62.p2   0x62.3p3   0x62.p+21  0x62.p-22     0x62.3p+23    0x62.3p-24
0x15p21   0x16p+72   0x16p-69


# Keywords
break   return   continue   local   fn          # statements
if      else     switch                         # conditionals
case    default                                 # labels
while   loop     for                            # repeat
true    false    nil        inf     infinity    # constants
super   self                                    # special instance variables


# Blocks
}  # curly error (only shown if 'c_curly_error' is set)
{
    ])
    {}
    // TODO FIXME XXX
    # TODO FIXME XXX
    /* TODO FIXME XXX */
    \e \n \f \x15 \523 \u[ff] \u{ffabcde2} */
    0908
    2 52 0x15 052 15.2 0x.15p0 2 == 2
    class {} return break continue local fn
    {
        "ok\tay" '5' 'a' '\n' +->>< '\x15'
        if  else switch
        {case default}
        while for foreach x in  loop
    }
    true false nil inf infinity
    super self in
}


# Parens
) # paren error
(}])
(/* TODO FIXME XXX */ 009)
(\e \n \f \x15 \523 \u[ff] \u{ffabcde2} */)
(2 52 0x15 052 15.2 0x.15p0 085 2 == 2)
("ok\tay" '5' 'a' '\n' +->>< '\x15')
(class {} break return continue local)
(if else switch)
(case default [])
(while for foreach loop fn {})
(true false nil inf infinity ())
(super self in)


# Brackets
] # bracket error
[})]
[/* TODO FIXME XXX */ 009]
[\e \n \f \x15 \523 \u[ff] \u{ffabcde2} */]
[2 52 0x15 052 15.2 0x.15p0 2 == 2]
["ok\tay" '5' 'a' '\n' +->>< '\x15']
[class {} break return continue local {}]
[if else switch]
[case default]
[fn while for foreach loop []]
[true false nil inf infinity ()]
[super self in]


# Identifier (name)
My_Name69
__myname420


# Function
fn add(x, y) {
    return x + y;
}
fn module69.add3(x, y, z) {
    return x + y + z;
}


# Class
class b {
    fn name() {
        return "b";
    }
}
class a inherits sdfa.sdf {
    fn self __init(id) {
        self.id = id;
    }
    fn func() {
        return super.name() .. tostring(self.id);
    }
}
local a_instance = a(69);
assert(a_instance.func() == "69");


# Foreach
foreach node in iterator(btree) {
    local node_id = getid(node);
    print(__G[node_id]);
}
foreach i, n in ipairs([69, 420, 1337], ...) {
    print(i, n);
}


# Switch
switch (x) {
    case 5:
        print("x == 5");
        break;
    case "okay":
        print("x == okay");
        break;
    case nil:
        print("x == nil");
        break;
    default:
        print("no match");
        break;
}


# Loop
loop {
    break;
}

for (local x = 5; x < 7; x = x + 1) {
    if (x == 5) continue;
    else {
        assert(x > 5);
        break;
    }
}
assert(x == 6);
