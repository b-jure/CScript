chunk ::= block

block ::= {decl} [returnstm]

decl ::= localstm ';' | localfn | localclass | stm

localstm ::= 'local' attnamelist ['=' explist]

attnamelist ::= Name attrib {',' Name attrib}

attrib ::= ['<' Name '>']

localfn ::= 'local' 'fn' Name parenparams funcbody

localclass ::= 'local' 'class' Name classbody

stm ::= ';' | expstm ';' | lastcall ';' | breakstm | continuestm | fnstm
      | classstm | loopstm | whilestm | forstm | foreachstm | ifstm
      | switchstm | blockstm | returnstm

assignop ::= '=' | '+=' | '-=' | '*=' | '/=' | '//=' | '**='
           | '%=' | '&=' | '|=' | '^=' | '>>=' | '<<=' | '..='

expstm ::= varlist assignop explist | var '++' | var '--'

varlist ::= var {',' var}

var ::= Name | prefixexp '[' exp ']' | prefiexp '.' Name

explist ::= exp {',' exp}

breakstm ::= 'break' ';'

continuestm ::= 'continue' ';'

dottedname ::= Name {'.' Name}

fnstm ::= 'fn' dottedname parenparams funcbody

classstm ::= 'class' dottedname classbody

loopstm ::= 'loop' stm

whilestm ::= 'while' exp stm

forsep ::= ';' | ','

forinit ::= localstm | expstm

forinfix ::= [forinit] forsep [exp] forsep [expstm]

forclauses ::= '(' forinfix ')' | forinfix forsep

forstm ::= 'for' forclauses stm

namelist ::= Name {',' Name}

forexplist ::= exp [',' exp]
             | exp ',' exp [',' exp]
             | exp ',' exp ',' exp [',' exp]

foreachstm ::= 'foreach' namelist 'in' forexplist stm

ifstm ::= 'if' exp stm ['else' stm]

switchbody ::= '{' {'case' exp ':' {stm}} ['default' ':' {stm}] '}'

switchstm ::= 'switch' exp switchbody

switchblock ::= {decl} [breakstm] | block

loopblock ::= {decl} [continuestm] | switchblock

blockstm ::= '{' loopblock '}'

returnstm ::= 'return' [explist] ';'

functiondef ::= 'fn' parenparams funcbody | pipeparams funcbody

sep ::= ',' | ';'

elementlist ::= exp {sep exp} [sep]

listdef ::= '[' [elementlist] ']'

field ::= '[' exp ']' '=' exp | Name '=' exp

fieldlist ::= field {sep field} [sep]

tabledef ::= '{' [fieldlist] '}'

parameters ::= namelist [',' '...'] | '...'

pipeparams ::= '|' [parameters] '|'

parenparams ::= '(' [parameters] ')'

funcbody ::= '{' block '}'

method ::= 'fn' Name parenparams funcbody

metatag ::= '__getidx' | '__setidx' | '__gc' | '__close' | '__call'
          | '__init' | '__concat' | '__add' | '__sub' | '__mul'
          | '__div' | '__idiv' | '__mod' | '__pow' | '__shl'
          | '__shr' | '__band' | '__bor' | '__bxor' | '__unm'
          | '__bnot' | '__eq' | '__lt' | '__le' | '__name' | '__metatable'

metavalue ::= functiondef | exp

metafield ::= metatag '=' metavalue ';'

definitions ::= method | metafield

classbody ::= ['inherits' exp] '{' {definitions} '}'

classdef ::= 'class' classbody

prefixexp ::= var | call ['?'] | '(' exp ')' | superexp

call ::= prefixexp '(' [explist] ')'

lastcall ::= call

superexp ::= 'super' ['[' exp ']'] | 'super' ['.' Name]

binop ::= '+' | '-' | '*' | '/' | '//' | '**' | '%'
        | '&' | '~' | '|' | '^' | '>>' | '<<' | '..'
        | '<' | '<=' | '>' | '>=' | '=='| '!='
        | and | or

unop ::= '-' | '!' | '~'

exp ::= 'true' | 'false' | 'nil' | '...' | Number | LiteralString
      | listdef | tabledef | functiondef | classdef | prefixexp
      | exp binop exp | unop exp
