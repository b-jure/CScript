local table = {};
assert(typeof(table) == "table");
class table.line {
    __init = fn(x, y) {
        self.x = x;
        self.y = y;
        return self;
    };
    fn cords() {
        return self.x, self.y;
    }
}
assert(typeof(table.line) == "class");
table.myline = table.line(15, 12);
assert(typeof(table.myline) == "instance");
assert(table.myline.x == 15);
assert(table.myline.y == 12);
local x, y = table.myline.cords();
assert(x == 15);
assert(y == 12);
table.config = {};
assert(typeof(table.config) == "table");
class table.config.point {
    __init = fn(x, y) {
        self.x = x;
        self.y = y;
        return self;
    };
    fn cords() {
        return self.x, self.y;
    }
}
assert(typeof(table.config.point) == "class");
table.config.myconfig = table.config.point(69, 420);
assert(typeof(table.config.myconfig) == "instance");
x, y = table.config.myconfig.cords();
assert(x == 69);
assert(y == 420);

{
    class Vec2 {
        __init = |x, y| {
            self.x = (x or 0);
            self.y = (y or 0);
            print("Return " .. tostr(self));
            return self;
        };
        __add = |rhs| {
            return getclass(self)(self.x + rhs.x, self.y + rhs.y);
        };
        __name = "Vec2";
    };
    local class x inherits Vec2 {} /* inherits all metafields */
    local vec = x(2, 3) + x(3, 3);
    assert(vec.x == 5 and vec.y == 6);
    assert(string.find(tostr(vec), "Vec2"));
}
