print("testing (parts of) list library");


local fn checkerror(msg, f, ...) {
    local s, err = pcall(f, ...);
    assert(!s and string.find(err, msg));
}


{
    print("testing 'list.new'");
    local N = 10000;
    gc();
    local m = gc("count") * 1024;
    local l = list.new(N);
    local memdiff = gc("count") * 1024 - m;
    assert(memdiff > N * 4);
    foreach i in range(0, 20) {
        assert(list.len(l) == i);
        l[i] = 0;
    }
    foreach i in range(0, 20) l[l.len] = i * 10;
    assert(l.len == 40 and l.last == 190);
    l = nil;
    gc();
    m = gc("count") * 1024;
    l = list.new(1024);
    memdiff = gc("count") * 1024 - m;
    assert(memdiff > 1024 * 12);
    local maxint1 = 1 << (4 * 8 - 1);
    checkerror("out of range", list.new, maxint1);
}


{
    print("testing flatten");

    local flatten = list.flatten;

    local x,y,z,a,n;
    a = []; local lim = 2000;
    for (local i=0; i <= lim; i=i+1) a[i]=i;
    assert(getargs(lim, flatten(a)) == lim and getargs("last", flatten(a)) == lim);
    x = flatten(a);
    assert(x == 0);
    x = [flatten(a)];
    assert(list.len(x) == lim+1 and x[0] == 0 and x[lim] == lim);
    x = [flatten(a, lim-2)];
    assert(x.len == 3 and x[0] == lim-2 and x[2] == lim);
    x = [flatten(a, 9, 5)];
    assert(x.last == nil); /// no elements
    x = [flatten(a, 11, 10)];
    assert(x.len == 0); /// no elements
    x,y = flatten(a, 10, 10);
    assert(x == 10 and y == nil);
    x,y,z = flatten(a, 10, 11);
    assert(x == 10 and y == 11 and z == nil);
    a,x = flatten([1]);
    assert(a==1 and x==nil);
    a,x = flatten([1,2], 0, 0);
    assert(a==1 and x==nil);

    local maxi = (1 << 31) - 1; /// maximum value for an int (usually)
    assert(maxi == list.maxindex + 1);
    checkerror("end index out of bounds", flatten, [], 2, maxi);
    checkerror("end index out of bounds", flatten, [], 2, -1);
    checkerror("start index out of bounds", flatten, [], -1, 5);
    checkerror("start index out of bounds", flatten, [], maxi, 5);
    if (false) { /// test flatten on big list
        local bl = [];
        local lim = 1<<24; /// bytecode limit
        for (local i = 0; i <= lim; i=i+1)
            bl[i] = i;
        checkerror("too many results", flatten, bl);
    }
    flatten([], list.maxindex, 0);
    flatten([], list.maxindex, 1);
    flatten([], list.maxindex, list.maxindex);
    pcall(flatten, [], 0, list.maxindex + 1);
}


{ /// testing move
    checkerror("list expected", list.move, 1, 2, 3, 4);
    checkerror("start index out of bounds", list.move, [], -1, 0, 0);
    checkerror("start index out of bounds", list.move, [], list.maxindex+1, 0, 0);
    checkerror("end index out of bounds", list.move, [], 0, -1, 0);
    checkerror("end index out of bounds", list.move, [], 0, list.maxindex+1, 0);
    checkerror("destination index out of bounds", list.move, [], 0, 0, -1);
    checkerror("destination index out of bounds", list.move, [], 0, 0, list.maxindex+1);

    local fn eqL(a, b) {
        foreach i, v in ipairs(a) assert(b[i] == v);
        foreach i, v in ipairs(b) assert(a[i] == v);
    }

    local a = list.move([10,20,30], 0, 2, 1); /// move forward
    eqL(a, [10,10,20,30]);

    /// move forward with overlap of 1
    a = list.move([10, 20, 30], 0, 2, 2);
    eqL(a, [10, 20, 10, 20, 30]);

    /// moving to the same table (not being explicit about it)
    a = [10, 20, 30, 40];
    list.move(a, 0, 3, 1, a);
    eqL(a, [10, 10, 20, 30, 40]);

    a = list.move([10,20,30], 1, 2, 0); /// move backward
    eqL(a, [20,30,30]);

    a = []; /// move to new table
    assert(list.move([10,20,30], 0, 2, 0, a) == a);
    eqL(a, [10,20,30]);

    a = [];
    assert(list.move([10,20,30], 1, 0, 2, a) == a); /// empty move (no move)
    eqL(a, []);

    a = list.move([10,20,30], 0, 9, 0); /// move to the same place
    eqL(a, [10,20,30]);
}


{
    print("testing sort");
    /// test checks for invalid order functions
    local fn check(l) {
        local fn f(a, b) { assert(a and b); return true; }
        checkerror("invalid order function", list.sort, l, f);
    }
    check([1,2,3,4]);
    check([1,2,3,4,5]);
    check([1,2,3,4,5,6]);

    fn check(a, f) {
        f = f or fn(x,y) { return x<y; };
        foreach n in range(a.len-1, 0, -1)
            assert(!f(a[n], a[n-1]));
    }
    a = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
         "Oct", "Nov", "Dec"];
    list.sort(a);
    check(a);

    local fn perm(s, n) {
        n = n or list.len(s);
        if (n == 1) {
            local l = [list.flatten(s)];
            list.sort(l);
            check(l);
        } else {
            for (local i=0; i < n; i=i+1) {
                s[i], s[n-1] = s[n-1], s[i];
                perm(s, n - 1);
                s[i], s[n-1] = s[n-1], s[i];
            }
        }
    }
    perm([]);
    perm([1]);
    perm([1,2]);
    perm([1,2,3]);
    perm([1,2,3,4]);
    perm([2,2,3,4]);
    perm([1,2,3,4,5]);
    perm([1,2,3,3,5]);
    perm([1,2,3,4,5,6]);
    perm([2,2,3,3,5,6]);

    local fn timesort(a, n, func, msg, pre) {
        local x = os.clock();
        list.sort(a, func);
        x = (os.clock() - x) * 1000;
        pre = pre or "";
        print(string.fmt("%ssorting %d %s elements in %.2f msec.", pre, n, msg, x));
        check(a, func);
    }
    local limit = 50000;
    a = [];
    for (local i=0; i<=limit; i=i+1)
        a[i] = math.rand();
    timesort(a, limit, nil, "random");
    timesort(a, limit, nil, "sorted", "re-");

    a = [];
    for (local i=0; i <= limit; i=i+1)
        a[i] = math.rand();

    local x = os.clock(); local i = 0;
    list.sort(a, fn(x,y) { i=i+1; return y<x; });
    x = (os.clock() - x) * 1000;
    print(string.fmt("Invert-sorting other %d elements in %.2f msec., with %i comparisons",
                limit, x, i));
    check(a, fn(x,y) { return y<x; });

    list.sort([]);  /// empty list

    for (local i=0; i<=limit; i=i+1) { a[i] = false; }
    timesort(a, limit, fn(x,y) { return nil; }, "equal");

    foreach _,v in ipairs(a) assert(v == false);

    AA = ["\xE1lo", "\0first :-)", "alo", "then this one", "45", "and a new"];
    list.sort(AA);
    check(AA);
    __G.AA = nil;
}
