local debug = import("debug");

local fn dostring(s) { return assert(load(s))(); }

print("testing debug library and debug information\n");

{ local a=1; }

assert(!debug.gethook());

local testline = 12;        /// line where 'test' is defined
local fn test(s, l, p) {    /// this must be line 14
    gc();  /// avoid gc during trace
    local fn f(event, line) {
        assert(event == "line");
        local l = list.remove(l, 0);
        if (p) print(l, line);
        assert(l == line, "wrong trace!!");
    }
    debug.sethook(f,"l"); load(s)(); debug.sethook();
    assert(list.len(l) == 0);
}


{ /// test basic cases for 'getinfo'
    assert(!pcall(debug.getinfo, print, "X"));  /// invalid option
    assert(!pcall(debug.getinfo, 0, ">"));  /// invalid option
    assert(!debug.getinfo(1000));  /// out of range level
    assert(!debug.getinfo(-1));    /// out of range level
    local a = debug.getinfo(print);
    assert(a.what == "C" and a.shortsrc == "[C]");
    a = debug.getinfo(print, "L");
    assert(a.activelines == nil);
    local b = debug.getinfo(test, "sfL");
    assert(b.name == nil and b.what == "CScript" and
           b.defline == testline and
           b.lastdefline == b.defline + 10 and
           b.func == test and !reg.find(b.shortsrc, "%["));
    assert(b.activelines[b.defline + 1] and
           b.activelines[b.lastdefline]);
    assert(!b.activelines[b.defline] and
           !b.activelines[b.lastdefline + 1]);
    print("+");
}



{ /// test file and string names truncation
    local a = "fn f() {}";
    local fn dostring(s, x) { return load(s, x)(); }
    dostring(a);
    print("----");
    assert(debug.getinfo(f).shortsrc == string.fmt("[string \"%s\"]", a));
    dostring(a..string.fmt("; %s\n=1;", string.repeat("p", 400)));
    assert(reg.find(debug.getinfo(f).shortsrc, "^%[string [^\n]*%.%.%.\"%]$"));
    dostring(a..string.fmt("; %s=1;", string.repeat("p", 400)));
    assert(reg.find(debug.getinfo(f).shortsrc, "^%[string [^\n]*%.%.%.\"%]$"));
    dostring("\n"..a);
    assert(debug.getinfo(f).shortsrc == "[string \"...\"]");
    dostring(a, "");
    assert(debug.getinfo(f).shortsrc == "[string \"\"]");
    dostring(a, "@xuxu");
    assert(debug.getinfo(f).shortsrc == "xuxu");
    dostring(a, "@"..string.repeat("p", 1000).."t");
    assert(reg.find(debug.getinfo(f).shortsrc, "^%.%.%.p*t$"));
    dostring(a, "=xuxu");
    assert(debug.getinfo(f).shortsrc == "xuxu");
    dostring(a, string.fmt("=%s", string.repeat("x", 500)));
    assert(reg.find(debug.getinfo(f).shortsrc, "^x*$"));
    dostring(a, "=");
    assert(debug.getinfo(f).shortsrc == "");
    __G.a = nil; __G.f = nil;
    __G[string.repeat("p", 400)] = nil;
    print("+");
}


loop {
    local g = {x = fn() {
        local a = debug.getinfo(2);
        assert(a.name == "f" and a.namewhat == "local");
        a = debug.getinfo(1);
        assert(a.name == "x" and a.namewhat == "field");
        return "xixi";
    }};
    local f = fn() { return 1+1 and (!1 or g.x()); };
    assert(f() == "xixi");
    g = debug.getinfo(f);
    assert(g.what == "CScript" and g.func == f and g.namewhat == "" and !g.name);

    fn f(x, name) {   /// local!
        name = name or "f";
        local a = debug.getinfo(1);
        print(string.fmt("name='%s', namewhat='%s'", a.name, a.namewhat));
        assert(a.name == name and a.namewhat == "local");
        return x;
    }

    /// breaks in different conditions
    if (3>4) break; f();
    if (3<4) a=1; else break; f();
    while (1) { local x=10; break; } f();
    local b = 1;
    if (3>4) return math.sin(1); f();
    a = 3<4; f();
    a = 3<4 or 1; f();
    loop { local x=20; if (4>3) f(); else break; f(); break; }
    g = {};
    f(g).x = f(2) and f(10)+f(9);
    assert(g.x == f(19));
    fn g(x) { if (!x) return 3; return (x("a", "x")); }
    assert(g(f) == "a");

    /// continue in different conditions
    loop {
        if (3>4) continue; f();
        if (3<4) a=1; else continue; f();
        local b = 1;
        a = 3<4; f();
        a = 3<4 or 1; f();
        loop { local x=20; if (4>3) f(); else continue; f(); break; }
        break;
    }
    break;
}


test([=[if
(math.sin(1))
  a=1;
else
  a=2;
]=], [2,3,5]);


test([=[
local fn foo() {
}
foo();
A = 1;
A = 2;
A = 3;
]=], [2, 3, 2, 4, 5, 6]);
__G.A = nil;


/// optimized 'if'
test([=[
if (nil)
  a=1;
else
  a=2;
]=], [4]);

test([=[a=1;
loop {
  a=a+1;
  if (a==3) break;
}
]=], [1,3,4,3,4,5]);

test([=[ {
  return;
}
]=], [2]);

test([=[local a;
a=1;
while (a<=3)
  a=a+1;
]=], [1,2,3,4,3,4,3,4,3,4]);

test([=[while (math.sin(1))
  if (math.sin(1))
    break;
a=1;]=], [1,2,3,4]);

test([=[foreach i in range(0,3)
  a=i;
]=], [1,2,1,2,1,2,1,2]);

test([=[foreach i,v in ipairs(["a","b"])
  a=tostr(i) .. v;
]=], [1,2,1,2,1,2]);

test([=[for (local i=0;
            i<3;
            i=i+1)
        a=1;
]=], [1,2,4,3,2,4,3,2,4,3,2,4]);

/// code jumps back
test([=[for (local i=0; i<3; i=i+1) a=1;]=], [1,1,1,1,1,1,1]);

__G.a = nil;


{ /// testing line info/trace with large gaps in source

    local a = [1, 2, 3, 10, 124, 125, 126, 127, 128, 129, 130,
               255, 256, 257, 500, 1000];
    local s = [=[
        local b = [10];
        a = b[0] X + Y b[0];
        b = 4;
    ]=];
    foreach _, i in ipairs(a) {
        local subs = {X = string.repeat("\n", i)};
        foreach _, j in ipairs(a) {
            subs.Y = string.repeat("\n", j);
            local s = reg.gsub(s, "[XY]", subs);
            test(s, [1, 2, 2 + i, 2 + i + j, 2 + i, 2 + i + j, 3 + i + j], true);
        }
    }
}
__G.a = nil;


{ /// testing active lines
    local fn checkactivelines(f, lines) {
        local t = debug.getinfo(f, "sL");
        foreach _, l in ipairs(lines) {
            l = l + t.defline;
            assert(t.activelines[l]);
            t.activelines[l] = undef;
        }
        assert(nextfield(t.activelines) == nil);  /// no extra lines
    }

    checkactivelines(fn(...) { /// vararg function
        /// 1st line is empty
        /// 2nd line is empty
        /// 3th line is empty
        local a = 20;
        /// 5th line is empty
        local b = 30;
        /// 7th line is empty
    }, [4, 6, 8]);

    checkactivelines(fn(a) {
        /// 1st line is empty
        /// 2nd line is empty
        a = 20;
        local b = 30;
        /// 5th line is empty
    }, [3, 4, 6]);

    checkactivelines(fn(a, b, ...) {}, [0]);

    checkactivelines(fn(a, b) {
    }, [1]);

    foreach _, n in ipairs([0, 1, 2, 10, 50, 100, 1000, 10000])
        checkactivelines(
            load(string.fmt("%s return 1;", string.repeat("\n", n))),
            [n + 1]);
}

print("+");

/// invalid levels in [gs]etlocal
assert(!pcall(debug.getlocal, 20, 1));
assert(!pcall(debug.setlocal, -1, 1, 10));


/// parameter names
local fn foo(a,b,...) { local d, e; }

assert(debug.getlocal(foo, 1) == "a");
assert(debug.getlocal(foo, 2) == "b");
assert(!debug.getlocal(foo, 3));

assert(!debug.getlocal(print, 1));


fn foo() { return (debug.getlocal(1, -1)); }
assert(!foo(10));


/// varargs
fn foo(a, ...) {
    local l = [...];
    foreach i in range(0, l.len) {
        local n, v = debug.getlocal(1, -i - 1);;
        assert(n == "(vararg)" and v == l[i]);
    }
    assert(!debug.getlocal(1, -(l.len + 1)));
    assert(!debug.setlocal(1, -(l.len + 1), 30));
    if (l.len > 0) {
        (fn(x) {
         assert(debug.setlocal(2, -1, x) == "(vararg)");
         assert(debug.setlocal(2, -l.len, x) == "(vararg)");
         })(420);
        assert(... == 420);
    }
}

foo();
foo(print);
foo(200, 3, 4);
local a = [];
foreach i in range(0, 1000) a[i] = i;
foo(list.flatten(a));



{ /// test hook presence in debug info
    assert(!debug.gethook());
    local count = 0;
    local fn f() {
        assert(debug.getinfo(1).namewhat == "hook");
        local sndline = reg.match(debug.traceback(), "\n(.-)\n");
        assert(string.find(sndline, "hook"));
        count = count + 1;
    }
    debug.sethook(f, "l");
    local a = 0;
    __ENV.a = a;
    a = 1;
    debug.sethook();
    assert(count == 4);
}
__ENV.a = nil;


a = {}; local L = nil;
local glob = 1;
local oldglob = glob;
debug.sethook(fn(e,l) {
    gc(); /// force GC during a hook
    local f, m, c = debug.gethook();
    assert(m == "crl" and c == 0);
    if (e == "line") {
        if (glob != oldglob) {
            L = l-1; /// get the first line where "glob" has changed
            oldglob = glob;
        }
    } else if (e == "call") {
        local f = debug.getinfo(2, "f").func;
        a[f] = 1;
    } else assert(e == "return");
}, "crl");


fn f(a,b) {
    gc();
    local _, x = debug.getlocal(1, 1);
    local _, y = debug.getlocal(1, 2);
    assert(x == a and y == b);
    assert(debug.setlocal(2, 3, "pera") == "AA".."AA");
    assert(debug.setlocal(2, 4, "manga") == "B");
    x = debug.getinfo(2);
    assert(x.func == g and x.what == "CScript" and
           x.name == "g" and x.nupvals == 2 and
           reg.find(x.source, "^@.*db%.cscript$"));
    glob = glob+1;
    assert(debug.getinfo(1, "l").currline == L+1);
    assert(debug.getinfo(1, "l").currline == L+2);
}

fn foo() {
    glob = glob+1;
    assert(debug.getinfo(1, "l").currline == L+1);
}; foo();  /// set L
/// check line counting inside strings and empty lines

local _ = "alo\
alo" .. [=[

]=];
/*
*/
assert(debug.getinfo(1, "l").currline == L+11);  /// check count of lines


fn g(...) {
    local arg = [...];
    { local a,b,c; a=math.sin(40); }
    local feijao;
    local AAAA,B = "xuxu", "abacate";
    f(AAAA,B);
    assert(AAAA == "pera" and B == "manga");
    {
        local B = 13;
        local x,y = debug.getlocal(1,5);
        assert(x == "B" and y == 13);
    }
}

g();


assert(a[f] and a[g] and a[assert] and a[debug.getlocal] and !a[print]);
///
///
///-- tests for manipulating non-registered locals (C and Lua temporaries)
///
///local n, v = debug.getlocal(0, 1)
///assert(v == 0 and n == "(C temporary)")
///local n, v = debug.getlocal(0, 2)
///assert(v == 2 and n == "(C temporary)")
///assert(!debug.getlocal(0, 3))
///assert(!debug.getlocal(0, 0))
///
///fn f()
///  assert(select(2, debug.getlocal(2,3)) == 1)
///  assert(!debug.getlocal(2,4))
///  debug.setlocal(2, 3, 10)
///  return 20
///end
///
///fn g(a,b) return (a+1) + f() end
///
///assert(g(0,0) == 30)
/// 
///_G.f, _G.g = nil
///
///debug.sethook(nil);
///assert(!debug.gethook())
///
///
///-- minimal tests for setuservalue/getuservalue
///do
///  assert(!debug.setuservalue(io.stdin, 10))
///  local a, b = debug.getuservalue(io.stdin, 10)
///  assert(a == nil and !b)
///end
///
///-- testing iteraction between multiple values x hooks
///do
///  local fn f(...) return 3, ... end
///  local count = 0
///  local a = {}
///  for i = 1, 100 do a[i] = i end
///  debug.sethook(fn () count = count + 1 end, "", 1)
///  local t = {table.unpack(a)}
///  assert(#t == 100)
///  t = {table.unpack(a, 1, 3)}
///  assert(#t == 3)
///  t = {f(table.unpack(a, 1, 30))}
///  assert(#t == 31)
///end
///
///
///-- testing access to function arguments
///
///local fn collectlocals (level)
///  local tab = {}
///  for i = 1, math.huge do
///    local n, v = debug.getlocal(level + 1, i)
///    if !(n and string.find(n, "^[a-zA-Z0-9_]+$")) then
///       break   -- consider only real variables
///    end
///    tab[n] = v
///  end
///  return tab
///end
///
///
///local X = nil
///a = {}
///fn a:f (a, b, ...) local arg = {...}; local c = 13 end
///debug.sethook(fn (e)
///  assert(e == "call")
///  dostring("XX = 12")  -- test dostring inside hooks
///  -- testing errors inside hooks
///  assert(!pcall(load("a='joao'+1")))
///  debug.sethook(fn (e, l) 
///    assert(debug.getinfo(2, "l").currentline == l)
///    local f,m,c = debug.gethook()
///    assert(e == "line")
///    assert(m == 'l' and c == 0)
///    debug.sethook(nil)  -- hook is called only once
///    assert(!X)       -- check that
///    X = collectlocals(2)
///  end, "l")
///end, "c")
///
///a:f(1,2,3,4,5)
///assert(X.self == a and X.a == 1   and X.b == 2 and X.c == nil)
///assert(XX == 12)
///assert(!debug.gethook())
///_G.XX = nil
///
///
///-- testing access to local variables in return hook (bug in 5.2)
///do
///  local X = false
///
///  local fn foo (a, b, ...)
///    do local x,y,z end
///    local c, d = 10, 20
///    return
///  end
///
///  local fn aux ()
///    if debug.getinfo(2).name == "foo" then
///      X = true   -- to signal that it found 'foo'
///      local tab = {a = 100, b = 200, c = 10, d = 20}
///      for n, v in pairs(collectlocals(2)) do
///        assert(tab[n] == v)
///        tab[n] = undef
///      end
///      assert(next(tab) == nil)    -- 'tab' must be empty
///    end
///  end
///
///  debug.sethook(aux, "r"); foo(100, 200); debug.sethook()
///  assert(X)
///
///end
///
///
///local fn eqseq (t1, t2)
///  assert(#t1 == #t2)
///  for i = 1, #t1 do
///    assert(t1[i] == t2[i])
///  end
///end
///
///
///do  print("testing inspection of parameters/returned values")
///  local on = false
///  local inp, out
///
///  local fn hook (event)
///    if !on then return end
///    local ar = debug.getinfo(2, "ruS")
///    local t = {}
///    for i = ar.ftransfer, ar.ftransfer + ar.ntransfer - 1 do
///      local _, v = debug.getlocal(2, i)
///      t[#t + 1] = v 
///    end
///    if event == "return" then
///      out = t
///    else
///      inp = t
///    end
///  end
///
///  debug.sethook(hook, "cr")
///
///  on = true; math.sin(3); on = false
///  eqseq(inp, {3}); eqseq(out, {math.sin(3)})
///
///  on = true; select(2, 10, 20, 30, 40); on = false
///  eqseq(inp, {2, 10, 20, 30, 40}); eqseq(out, {20, 30, 40})
///
///  local fn foo (a, ...) return ... end
///  local fn foo1 () on = !on; return foo(20, 10, 0) end
///  foo1(); on = false
///  eqseq(inp, {20}); eqseq(out, {10, 0})
///
///  debug.sethook()
///end
///
///
///
///-- testing upvalue access
///local fn getupvalues (f)
///  local t = {}
///  local i = 1
///  while true do
///    local name, value = debug.getupvalue(f, i)
///    if !name then break end
///    assert(!t[name])
///    t[name] = value
///    i = i + 1
///  end
///  return t
///end
///
///local a,b,c = 1,2,3
///local fn foo1 (a) b = a; return c end
///local fn foo2 (x) a = x; return c+b end
///assert(!debug.getupvalue(foo1, 3))
///assert(!debug.getupvalue(foo1, 0))
///assert(!debug.setupvalue(foo1, 3, "xuxu"))
///local t = getupvalues(foo1)
///assert(t.a == nil and t.b == 2 and t.c == 3)
///t = getupvalues(foo2)
///assert(t.a == 1 and t.b == 2 and t.c == 3)
///assert(debug.setupvalue(foo1, 1, "xuxu") == "b")
///assert(({debug.getupvalue(foo2, 3)})[2] == "xuxu")
///-- upvalues of C functions are allways "called" "" (the empty string)
///assert(debug.getupvalue(string.gmatch("x", "x"), 1) == "")  
///
///
///-- testing count hooks
///local a=0
///debug.sethook(fn (e) a=a+1 end, "", 1)
///a=0; for i=1,1000 do end; assert(1000 < a and a < 1012)
///debug.sethook(fn (e) a=a+1 end, "", 4)
///a=0; for i=1,1000 do end; assert(250 < a and a < 255)
///local f,m,c = debug.gethook()
///assert(m == "" and c == 4)
///debug.sethook(fn (e) a=a+1 end, "", 4000)
///a=0; for i=1,1000 do end; assert(a == 0)
///
///do
///  debug.sethook(print, "", 2^24 - 1)   -- count upperbound
///  local f,m,c = debug.gethook()
///  assert(({debug.gethook()})[3] == 2^24 - 1)
///end
///
///debug.sethook()
///
///local g, g1
///
///-- tests for tail calls
///local fn f (x)
///  if x then
///    assert(debug.getinfo(1, "S").what == "Lua")
///    assert(debug.getinfo(1, "t").istailcall == true)
///    local tail = debug.getinfo(2)
///    assert(tail.func == g1 and tail.istailcall == true)
///    assert(debug.getinfo(3, "S").what == "main")
///    print"+"
///    end
///end
///
///assert(debug.getinfo(print, 't').istailcall == false)
///assert(debug.getinfo(print, 't').extraargs == 0)
///
///fn g(x) return f(x) end
///
///fn g1(x) g(x) end
///
///local fn h (x) local f=g1; return f(x) end
///
///h(true)
///
///local b = {}
///debug.sethook(fn (e) table.insert(b, e) end, "cr")
///h(false)
///debug.sethook()
///local res = {"return",   -- first return (from sethook)
///  "call", "tail call", "call", "tail call",
///  "return", "return",
///  "call",    -- last call (to sethook)
///}
///for i = 1, #res do assert(res[i] == table.remove(b, 1)) end
///
///b = 0
///debug.sethook(fn (e)
///                if e == "tail call" then
///                  b = b + 1
///                  assert(debug.getinfo(2, "t").istailcall == true)
///                else
///                  assert(debug.getinfo(2, "t").istailcall == false)
///                end
///              end, "c")
///h(false)
///debug.sethook()
///assert(b == 2)   -- two tail calls
///
///local lim = _soft and 3000 or 30000
///local fn foo (x)
///  if x==0 then
///    assert(debug.getinfo(2).what == "main")
///    local info = debug.getinfo(1)
///    assert(info.istailcall == true and info.func == foo)
///  else return foo(x-1)
///  end
///end
///
///foo(lim)
///
///
///print"+"
///
///
///-- testing local function information
///co = load[[
///  local A = fn ()
///    return x
///  end
///  return
///]]
///
///local a = 0
///-- 'A' should be visible to debugger only after its complete definition
///debug.sethook(fn (e, l)
///  if l == 3 then a = a + 1; assert(debug.getlocal(2, 1) == "(temporary)")
///  elseif l == 4 then a = a + 1; assert(debug.getlocal(2, 1) == "A")
///  end
///end, "l")
///co()  -- run local function definition
///debug.sethook()  -- turn off hook
///assert(a == 2)   -- ensure all two lines where hooked
///
///-- testing traceback
///
///assert(debug.traceback(print) == print)
///assert(debug.traceback(print, 4) == print)
///assert(string.find(debug.traceback("hi", 4), "^hi\n"))
///assert(string.find(debug.traceback("hi"), "^hi\n"))
///assert(!string.find(debug.traceback("hi"), "'debug.traceback'"))
///assert(string.find(debug.traceback("hi", 0), "'debug.traceback'"))
///assert(string.find(debug.traceback(), "^stack traceback:\n"))
///
///do  -- C-function names in traceback
///  local st, msg = (fn () return pcall end)()(debug.traceback)
///  assert(st == true and string.find(msg, "pcall"))
///end
///
///
///-- testing nparams, nups e isvararg
///local t = debug.getinfo(print, "u")
///assert(t.isvararg == true and t.nparams == 0 and t.nups == 0)
///
///t = debug.getinfo(fn (a,b,c) end, "u")
///assert(t.isvararg == false and t.nparams == 3 and t.nups == 0)
///
///t = debug.getinfo(fn (a,b,...) return t[a] end, "u")
///assert(t.isvararg == true and t.nparams == 2 and t.nups == 1)
///
///t = debug.getinfo(1)   -- main
///assert(t.isvararg == true and t.nparams == 0 and t.nups == 1 and
///       debug.getupvalue(t.func, 1) == "_ENV")
///
///t = debug.getinfo(math.sin)   -- C function
///assert(t.isvararg == true and t.nparams == 0 and t.nups == 0)
///
///t = debug.getinfo(string.gmatch("abc", "a"))   -- C closure
///assert(t.isvararg == true and t.nparams == 0 and t.nups > 0)
///
///
///
///-- testing debugging of coroutines
///
///local fn checktraceback (co, p, level)
///  local tb = debug.traceback(co, nil, level)
///  local i = 0
///  for l in string.gmatch(tb, "[^\n]+\n?") do
///    assert(i == 0 or string.find(l, p[i]))
///    i = i+1
///  end
///  assert(p[i] == undef)
///end
///
///
///local fn f (n)
///  if n > 0 then f(n-1)
///  else coroutine.yield() end
///end
///
///local co = coroutine.create(f)
///coroutine.resume(co, 3)
///checktraceback(co, {"yield", "db.lua", "db.lua", "db.lua", "db.lua"})
///checktraceback(co, {"db.lua", "db.lua", "db.lua", "db.lua"}, 1)
///checktraceback(co, {"db.lua", "db.lua", "db.lua"}, 2)
///checktraceback(co, {"db.lua"}, 4)
///checktraceback(co, {}, 40)
///
///
///co = coroutine.create(fn (x)
///       local a = 1
///       coroutine.yield(debug.getinfo(1, "l"))
///       coroutine.yield(debug.getinfo(1, "l").currentline)
///       return a
///     end)
///
///local tr = {}
///local foo = fn (e, l) if l then table.insert(tr, l) end end
///debug.sethook(co, foo, "lcr")
///
///local _, l = coroutine.resume(co, 10)
///local x = debug.getinfo(co, 1, "lfLS")
///assert(x.currentline == l.currentline and x.activelines[x.currentline])
///assert(type(x.func) == "function")
///for i=x.defline + 1, x.lastdefline do
///  assert(x.activelines[i])
///  x.activelines[i] = undef
///end
///assert(next(x.activelines) == nil)   -- no 'extra' elements
///assert(!debug.getinfo(co, 2))
///local a,b = debug.getlocal(co, 1, 1)
///assert(a == "x" and b == 10)
///a,b = debug.getlocal(co, 1, 2)
///assert(a == "a" and b == 1)
///debug.setlocal(co, 1, 2, "hi")
///assert(debug.gethook(co) == foo)
///assert(#tr == 2 and
///       tr[1] == l.currentline-1 and tr[2] == l.currentline)
///
///a,b,c = pcall(coroutine.resume, co)
///assert(a and b and c == l.currentline+1)
///checktraceback(co, {"yield", "in function <"})
///
///a,b = coroutine.resume(co)
///assert(a and b == "hi")
///assert(#tr == 4 and tr[4] == l.currentline+2)
///assert(debug.gethook(co) == foo)
///assert(!debug.gethook())
///checktraceback(co, {})
///
///
///-- check get/setlocal in coroutines
///co = coroutine.create(function (x)
///  local a, b = coroutine.yield(x)
///  assert(a == 100 and b == nil)
///  return x
///end)
///a, b = coroutine.resume(co, 10)
///assert(a and b == 10)
///a, b = debug.getlocal(co, 1, 1)
///assert(a == "x" and b == 10)
///assert(!debug.getlocal(co, 1, 5))
///assert(debug.setlocal(co, 1, 1, 30) == "x")
///assert(!debug.setlocal(co, 1, 5, 40))
///a, b = coroutine.resume(co, 100)
///assert(a and b == 30)
///
///
///-- check traceback of suspended (or dead with error) coroutines
///
///function f(i)
///  if i == 0 then error(i)
///  else coroutine.yield(); f(i-1)
///  end
///end
///
///
///co = coroutine.create(function (x) f(x) end)
///a, b = coroutine.resume(co, 3)
///t = {"'coroutine.yield'", "'f'", "in function <"}
///while coroutine.status(co) == "suspended" do
///  checktraceback(co, t)
///  a, b = coroutine.resume(co)
///  table.insert(t, 2, "'f'")   -- one more recursive call to 'f'
///end
///t[1] = "'error'"
///checktraceback(co, t)
///
///
///-- test acessing line numbers of a coroutine from a resume inside
///-- a C function (this is a known bug in Lua 5.0)
///
///local function g(x)
///    coroutine.yield(x)
///end
///
///local function f (i)
///  debug.sethook(function () end, "l")
///  for j=1,1000 do
///    g(i+j)
///  end
///end
///
///local co = coroutine.wrap(f)
///co(10)
///pcall(co)
///pcall(co)
///
///
///assert(type(debug.getregistry()) == "table")
///
///
///-- test tagmethod information
///local a = {}
///local function f (t)
///  local info = debug.getinfo(1);
///  assert(info.namewhat == "metamethod")
///  a.op = info.name
///  return info.name
///end
///setmetatable(a, {
///  __index = f; __add = f; __div = f; __mod = f; __concat = f; __pow = f;
///  __mul = f; __idiv = f; __unm = f; __len = f; __sub = f;
///  __shl = f; __shr = f; __bor = f; __bxor = f;
///  __eq = f; __le = f; __lt = f; __unm = f; __len = f; __band = f;
///  __bnot = f;
///})
///
///local b = setmetatable({}, getmetatable(a))
///
///assert(a[3] == "index" and a^3 == "pow" and a..a == "concat")
///assert(a/3 == "div" and 3%a == "mod")
///assert(a+3 == "add" and 3-a == "sub" and a*3 == "mul" and
///       -a == "unm" and #a == "len" and a&3 == "band")
///assert(a + 30000 == "add" and a - 3.0 == "sub" and a * 3.0 == "mul" and
///       -a == "unm" and #a == "len" and a & 3 == "band")
///assert(a|3 == "bor" and 3~a == "bxor" and a<<3 == "shl" and a>>1 == "shr")
///assert (a==b and a.op == "eq")
///assert (a>=b and a.op == "le")
///assert ("x">=a and a.op == "le")
///assert (a>b and a.op == "lt")
///assert (a>10 and a.op == "lt")
///assert(~a == "bnot")
///
///do   -- testing for-iterator name
///  local function f()
///    assert(debug.getinfo(1).name == "for iterator")
///  end
///
///  for i in f do end
///end
///
///
///do   -- testing debug info for finalizers
///  local name = nil
///
///  -- create a piece of garbage with a finalizer
///  setmetatable({}, {__gc = function ()
///    local t = debug.getinfo(1)   -- get function information
///    assert(t.namewhat == "metamethod")
///    name = t.name
///  end})
///
///  -- repeat until previous finalizer runs (setting 'name')
///  repeat local a = {} until name
///  assert(name == "__gc")
///end
///
///
///do
///  print("testing traceback sizes")
///
///  local function countlines (s)
///    return select(2, string.gsub(s, "\n", ""))
///  end
///
///  local function deep (lvl, n)
///    if lvl == 0 then
///      return (debug.traceback("message", n))
///    else
///      return (deep(lvl-1, n))
///    end
///  end
///
///  local function checkdeep (total, start)
///    local s = deep(total, start)
///    local rest = string.match(s, "^message\nstack traceback:\n(.*)$")
///    local cl = countlines(rest)
///    -- at most 10 lines in first part, 11 in second, plus '...'
///    assert(cl <= 10 + 11 + 1)
///    local brk = string.find(rest, "%.%.%.\t%(skip")
///    if brk then   -- does message have '...'?
///      local rest1 = string.sub(rest, 1, brk)
///      local rest2 = string.sub(rest, brk, #rest)
///      assert(countlines(rest1) == 10 and countlines(rest2) == 11)
///    else
///      assert(cl == total - start + 2)
///    end
///  end
///
///  for d = 1, 51, 10 do
///    for l = 1, d do
///      -- use coroutines to ensure complete control of the stack
///      coroutine.wrap(checkdeep)(d, l)
///    end
///  end
///
///end
