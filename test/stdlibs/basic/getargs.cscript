local cliargs = __G.cliargs or __G.CLIARGS;
assert(cliargs and typeof(cliargs) == "list" and cliargs.len >= 1); /* at least binary name */
local bin_name = getargs(0, list.flatten(cliargs));
assert(bin_name);
assert(typeof(bin_name) == "string");
assert(bin_name == getargs(0, list.flatten(cliargs)));

local args = __G.args or __G.ARGS;
assert(args and typeof(args) == "list" and args.len >= 1); /* at least script name */
local script_name = getargs(0, list.flatten(args));
assert(script_name);
assert(typeof(script_name) == "string");
assert(script_name == getargs(0, list.flatten(args)));

local x = getargs("list", list.flatten(cliargs));
assert(x);
assert(typeof(x) == "list");
assert(len(x) >= 1 and x[0] == bin_name);

x = getargs("table", list.flatten(cliargs));
assert(x);
assert(typeof(x) == "table");
assert(len(x) >= 1);
assert(x[cliargs[0]] == true);

local y, st;
assert(getargs("len", list.flatten(cliargs)) >= 1);
x, y = getargs(-1, list.flatten(cliargs));
assert(!y and x and typeof(x) == "string");
st, x = pcall(getargs, -cliargs.len, list.flatten(cliargs));
assert(st and x and typeof(x) == "string" and x == bin_name);
