/* {===========================
**          STATEMENTS
** ============================ */

# {LOCAL

# {local statement
local a;                                // single local uninitialized (nil) variable
print(a);                               // nil
local b, c, d;                          // multiple local uninitialized (nil) variables
print(b, c, d);                         // nil nil nil
local e, f, g = 1, 2, 3;                // multiple initialized local variables
print(e, f, g);                         // 1 2 3
print(a, b, c, d, e, f, g);             // nil nil nil nil 1 2 3
local a1 <final> = 69;                  // immutable local variable
print(a1);                              // 69
#a1 = a1 + 2;                          // error (assignment to a read-only variable)
#local a2 <close> = 420;               // error (variable got a non-closeable value)
local a2 <final>, a3 <final>, a4 <close>;
#a2 = 5;                               // error (assignment to a read-only variable)
#a3 = 6;                               // error (assignment to a read-only variable)
local b1 <final>, b2 <final>, b3 <close> = "Hello, ", "World", false;
print(b1 .. b2, b3);                    // "Hello, World"  false

# }{local function
local fn add(x, y) {
    return x + y;
}
print(add(5, 2));                       // 7
print(add);                             // function: <memory_address>

# }{local class
local class Empty {}
print(Empty);                           // class: <memory_address>
print(Empty());                         // instance: <memory_address>
local PI <final> = 3.141592654;
local class Circle {
    fn __init() {                       // override initializer
        self.radius = 4;
        return self;
    }
    fn area() {
        rsq = self.radius ** 2;
        return rsq * PI;
    }
    fn circumference() {
        local d = self.radius * 2;
        return d * PI;
    }
}
local circ = Circle();
print(circ);                            // instance: <memory_address>
print(circ.radius);                     // 4
print(circ.area());                     // around 50.265482464
print(circ.circumference());            // around 25.132741232
local ent;
local class Entity {
    fn type() {
        return "Entity";
    }
}
ent = Entity();
print(ent);                             // instance: <memory_address>
print(ent.type());                      // "Entity"
local class Human inherits Entity {     // Human class inherits Entity class
    fn __init(fname, lname) {
        self.fname = fname;
        self.lname = lname;
        return self;
    }
    fn name() {
        local fname = self.fname or "?";
        local lname = self.lname or "?";
        return fname .. " " .. lname;
    }
    fn type() {
        return "Human " .. super.type();
    }
}
ent = Human("John", "Cena");
print(ent);                             // instance: <memory_address>
print(ent.type());                      // "Human Entity"
print(ent.name());                      // "John Cena"
ent = Human();
print(ent.name());                      // "? ?"
# }}

# {function statement
fn func(...) {
    print(...);                 
    return 69;
};
print(func);                            // function: <memory_address>
func = func(...);                       // <binary>   <script>
print(func);                            // 69
# }

# {class statement
local table = {};
print(table);                           // hashtable: <memory_address>
class table.line {
    fn __init(x, y) {
        self.x = x;
        self.y = y;
        return self;
    }
    fn cords() {
        return self.x, self.y;
    }
}
table.myline = table.line(15, 12);
print(table.myline);                    // instance: <memory_address>
print(table.myline.cords());            // 15   12
table.config = {};
print(table.config);                    // hashtable: <memory_address>
class table.config.point {
    fn __init(x, y) {
        self.x = x;
        self.y = y;
        return self;
    }
    fn cords() {
        return self.x, self.y;
    }
}
table.config.myconfig = table.config.point(69, 420);
print(table.config.myconfig);           // instance: <memory_address>
print(table.config.myconfig.cords());   // 69   420
# }

# {while, break and block statements
while (false) {                         // optimized away
    print("unreachable");
}
while (true) {                          // converted to 'loop' statement
    local a = 69;
    print(a);                           // 69
    break;
}
print(a);                               // nil
local i = 0;
while (i < 5) {
    print("i = " .. tostring(i));
    i = i + 1;
}
print("i = " .. tostring(i));           // "i = 5"
while (true) {                          // 'break' in a loop with nested scopes
    local inner1 = 69;
    {
        local inner2 = 420;
        {
            local inner3 = 1337;
            print(inner1, inner2, inner3);  // 69  420  1337
            break;
        }
    }
}
print(inner1, inner2, inner3);          // nil  nil  nil
# }

# {if/else statement
if (false) {                            // optimized away
    print("unreachable");
}
if (69 < 420) {
    print("reachable");                 // reachable
}
if (true) {                             // condition optimized away
    print("reachable");                 // reachable
}
if (420 < 69) {
    print("unreachable");
} else {
    print("reachable");                 // reachable
}
if (420 < 69) {
    print("unreachable");
} else if (true) {                      // condition optimized away
    print("reachable");                 // reachable
}
if (420 < 69) {
    print("unreachable");
} else if (false) {                     // branch optimized away
    print("unreachable");
} else if (true) {                      // condition optimized away
    print("reachable");                 // reachable
}
if (420 < 69) {
    print("unreachable");
} else if (false) {                     // branch optimized away
    print("unreachable");
} else if (69 < 69) {
    print("unreachable");
} else if (69 < 420) {
    print("reachable");                 // reachable
} else {
    print("unreachable");
}
if (420 < 69) {
    print("unreachable");
} else if (false) {                     // branch optimized away
    print("unreachable");
} else if (69 < 69) {
    print("unreachable");
} else if (true) {                      // condition optimized away
    print("reachable");                 // reachable
} else if (true) {                      // branch optimized away
    print("unreachable");
} else {                                // branch optimized away
    print("unreachable");
}
# }

# {for statement
for (local i = 0; i < 5; i = i + 1)     // non-constant condition
    print(i);
for (local i = 0; ; i = i + 1) {        // infinite for loop
    if (i > 6) break;
    else print(i);
}
for (local i = 0; false; i = i + 1) {   // optimized away (except initializer)
    if (i > 6) break;
    print(i);
}
for (; true; print("unreachable"))      // for loop without initializer
    break;
for (;; print("unreachable"))           // for loop without initializer and condition
    break;
for (local i = 0; i < 2;) {             // for loop without last clause
    print(i);
    i = i + 1;
}
for (local i = 0;;) {                   // for loop without condition and last clause
    print(i);
    break;
}
for (;;)                                // for loop without initializer, condition and last clause
    break;
# }

# {loop statement
loop break;
{
    local x = 2;
    loop {
        if (x < 0) break;
        print(x);
        x = x - 1;
    }
}
#loop return;                            // loop is optimized out
#loop;                                   // infinite loop
#loop {}                                 // infinite loop
# }

# {continue statement
for (local x = 0; x < 3; x = x + 1) {
    local y, z;                         // 'continue' pops them
    if (x == 0) continue;               // first value of x is not printed
    print(x);                           // prints 1 and 2
}
# }

# {foreach statement
local transactions = {                  // hashtable for traversal
    Luigi = 69,
    Marco = 420,
    Fabio = 1337,
};
foreach k, v in pairs(transactions)
    print(k, v);
local points = [69, 420, 1337];
local array_iter = fn (arr) {  // foreach generator
    local i = 0;
    local n = len(arr);
    return fn () {  // iterates the whole array
        if (i < n) {  // index in bounds?
            i = i + 1;
            return i - 1, arr[i - 1];
        } else
            return nil;
    };
};
foreach i, point in array_iter(points) {
    if (i == 0) continue;
    print("points[" .. tostring(i) .. "] = " .. tostring(point));
}
# }

# {switch statement
switch ("Hello") {
    case "Hello":
        print("compile time match");
        break;
    case 5:
        print("optimized away");
    default:
        print("optimized away");
}
switch ("Hello") {
    case 5:
        print("optimized away");
        break;
    case nil:
        print("optimized away");
        break;
    case "World":
        print("optimized away");
        break;
    case 5.15:
        print("optimized away");
        break;
    case true: case false:
        print("optimized away");
        break;
    default:
        print("Hello, World");
        break;
}
switch ("Hello") { // the whole switch is optimized away
    case true:
        print("optimized away");
    case false:
        print("optimized away");
    case 69:
        print("optimized away");
}
switch ("Hello") { // compile-time match
    case 69:
        print("optimized away");
        break;
    case "Hello":
        print("Hello, World");
        break;
    case nil:
        print("optimized away");
    case 55:
        print("optimized away");
    default:
        print("optimized away");
}
switch ("Hello") { // compile-time match with fall-through
    case 69:
        print("optimized away");
        break;
    case "Hello":
        print("Hello, World");
        /* fall-through */
    case nil: /* test optimized away */
        print("Hello, World (again)");
    case 55: /* test optimized away */
        print("Hello, World (and again)");
    default:
        print("Hello, World (for the last time)");
}
local x_;
switch (x_) { // regular switch
    case 65:
        print("unreachable");
        break;
    case nil:
        print("x_ == nil");
        break;
    default:
        print("unreachable");
        break;
}
switch (x_) { // regular switch with fall-through
    case 65:
        print("x_ == 65");
        break;
    case nil:
        print("x_ == nil");
        /* fall-through */
    default:
        print("x_ is unknown");
        break;
}
switch (x_) { // nested switch
    case nil:
        print("entering nested switch");
        switch (x_) {
            case nil:
                print("x_ is nil");
        }
        print("left nested switch");
}
# }
 
/* ===========================} */
