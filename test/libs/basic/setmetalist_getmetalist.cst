class X {
    fn __init() {
        self.x = 69;
        return self;
    }
    fn __add(other) {
        return self.x + other.x;
    }
}
local t = { x = 1; };
local x = X();
local mlX = getmetalist(X);
assert(mlX);
assert(mlX[__init]);
assert(mlX[__init](t) == t);
assert(mlX[__add]);
assert(mlX[__add](t, t) == 138);


class Y {
    fn __init() { return self; }
}
local mlY = [];
mlY[__init] = fn(self, extra) {
    self.x = 34 + (extra or 0);
    return self;
};
mlY[__add] = fn(self, other) { return self.x + other.x; };
mlY[__sub] = fn(self, other) { return self.x - other.x; };
setmetalist(Y, mlY);
local y1 = Y();
assert(y1.x and y1.x == 34);
local y2 = Y(1);
assert(y2.x and y2.x == 35);
assert(y1 + y2 == 69);
assert(y1 - y2 == -1);
assert(y2 - y1 == 1);
setmetalist(Y, nil);
assert(getmetalist(Y) == nil);
