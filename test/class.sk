// Global class declaration
class Point {
    fn __init__(x, y) {
        self.x = x;
        self.y = y;
    }

    fn print() {
        printl("Point: { x: " + tostr(self.x) + ", y: " + tostr(self.y) + " }");
    }

    fn print2(point) {
        self.print();
        point.print();
    }

    fn eq(other) {
        if(!(self.x == other.x)) return false;
        return self.y == other.y;
    }
}

// Instantiate 'Point' class
var mypoint = Point(5, 10);
assert(mypoint.x == 5);
assert(mypoint.y == 10);
// Invoke method
mypoint.print();

// Instantiate new 'Point' class
var otherpoint = Point(6, 9);
assert(otherpoint.x == 6);
assert(otherpoint.y == 9);
// Invoke method
otherpoint.print();

// Invoke method
mypoint.print2(otherpoint);

class Triangle {
    fn __init__(point1, point2, point3) {
        self.p1 = point1;
        self.p2 = point2;
        self.p3 = point3;
    }
    
    fn surface() {
        var A, B, C = self.p1, self.p2, self.p3;
        return 0.5 * (A.x*(B.y - C.y) + B.x*(C.y - A.y) + C.x*(A.y - B.y));
    }

    fn eq(other) { // what a glorious function
        if(!self.p1.eq(other.p1)) return false;
        if(!self.p2.eq(other.p2)) return false;
        return self.p3.eq(other.p3);
    }
}

var mytriangle = Triangle(Point(1,1), Point(2,3), Point(-3, 0));
assert(mytriangle.p1.x == 1);
assert(mytriangle.p1.y == 1);
assert(mytriangle.p2.x == 2);
assert(mytriangle.p2.y == 3);
assert(mytriangle.p3.x == -3);
assert(mytriangle.p3.y == 0);
var b = mytriangle.surface();
printl(b);
printl(mytriangle.surface());
var other = Triangle(Point(1,1), Point(2,3), Point(-3, 0));
assert(mytriangle.eq(other));

class Animal {
    fn __init__(name) {
        self.name = name;
    }

    fn sound() {
        switch(self.name) {
            case "dog": printl("woof"); break;
            case "cat": printl("meow"); break;
            case "parrot": printl("blazeit"); break;
            case "cow": printl("mooo"); break;
            default: printl("uhmm, I don't have a clue!");
        } // fallthru on default case
    }
}

class Dog impl Animal {
    fn __init__() {
        self.name = "dog";
        super.sound();
    }
}

class Enigma impl Animal {
    fn __init__() {
        self.name = "enigma";
    }

    fn sound() {
        super.sound();
    }
}

class FarmAnimal impl Animal {}


var dog = Dog();
dog.sound(); // 'woof'

var enigma = Enigma();
enigma.sound(); // 'uhmm, I don't have a clue!'

var cow = FarmAnimal("cow");
cow.sound(); // 'mooo'

var cat = Animal("cat");
cat.sound(); // 'meow'

class Okay {
    fn ok() {
        printl("ok!");
    }
}

class NotOkay impl Okay {
    fn notokay() {
        printl("not!");
        super.ok();
    }
}

var nk = NotOkay();
nk.notokay();

var boundedmethod = NotOkay().notokay;
boundedmethod();

{
    var boundedmethodlocal = enigma.sound;
    boundedmethodlocal();
}
