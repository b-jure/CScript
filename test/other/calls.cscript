assert(typeof(1<2) == "boolean");
assert(typeof(true) == "boolean" and typeof(false) == "boolean");
assert(typeof(nil) == "nil"
   and typeof(-3) == "number"
   and typeof("x") == "string"
   and typeof({}) == "table"
   and typeof(typeof) == "function");

assert(typeof(assert) == typeof(print));
local fn f(x) { return a.x(a, x); }
assert(typeof(f) == "function");
assert(!pcall(typeof));


/// testing local-function recursion
fact = false;
{
  local res = 1;
  local fn fact(n) {
    if (n==0) return res;
    else return n*fact(n-1);
  }
  assert(fact(5) == 120);
}
assert(fact == false);
fact = nil;

{ /// testing declarations
    local class X {
        fn x(x) { return x + self.i; }
    };
    local b = X(); b.i = 10;
    local a = {i = 10};
    local self = 20;
    fn a.y(x) { return x+self; }

    assert(b.x(1)+10 == a.y(1));

    {
        local a;
        local class Y {
            fn add(x) {
                self.x, a.y = self.x+x, 20;
                return self;
            }
        }
        a = Y(); a.x = 0;
        assert(a.add(10).add(20).add(30).x == 60 and a.y == 20);
    }

    {
        local a = {b={}};
        fn a.b.f1(x) { return x+1; }
        class a.b.c {
            fn f2(x,y) { self[x] = y; }
        }
        a.b.c = a.b.c();
        assert(a.b.f1(4) == 5);
        a.b.c.f2("k", 12);
        assert(a.b.c.k == 12);
    }

    print("+");
}

t = nil; /// 'declare' t
fn f(a,b,c) {
    local d = "a";
    t=[a,b,c,d];
}

f(      /// this line change must be valid
  1,2);
assert(t[0] == 1 and t[1] == 2 and t[2] == nil and t[3] == "a");
f(1,2,   /// this one too
      3,4);
assert(t[0] == 1 and t[1] == 2 and t[2] == 3 and t[3] == "a");

t = nil; /// delete 't'

fn fat(x) {
    if (x <= 1)
        return 1;
    else
        return x*load("return fat(" .. tostr(x-1) .. ");", "")();
}

assert(load("load(\"assert(fat(6)==720);\")();"))();
a = load("return fat(5), 3;");
{
    local a,b = a();
    assert(a == 120 and b == 3);
}
fat = nil;
print("+");

local fn err_on_n(n) {
    if (n==0) { error(); exit(1); }
    else { err_on_n(n-1); exit(1); }
}

{
    local fn dummy(n) {
        if (n > 0) {
            assert(!pcall(err_on_n, n));
            dummy(n-1);
        }
    }
    dummy(10);
}

__G.deep = nil;

fn deep(n) {
    if (n>0) deep(n-1);
}
deep(10);
deep(180);


print("testing tail calls");

fn deep(n) {
    if (n>0) return deep(n-1);
    else return 101;
}
assert(deep(30000) == 101);
a = (class {
    fn deep(n) {
        if (n>0) return self.deep(n-1);
        else return 101;
    }
})();
assert(a.deep(30000) == 101);

{ /// tail calls x varargs
    local fn foo(x, ...) { local a = [...]; return x, a[0], a[1]; }

    local fn foo1(x) { return foo(10, x, x + 1); }

    local a, b, c = foo1(-2);
    assert(a == 10 and b == -2 and c == -1);

    /// tail calls x metamethods
    local ml = []; ml[__call] = foo;
    local z = setmetalist(class {}, ml)();
    local fn foo2(x) { return z(10, x); };
    a, b, c = foo2(100);
    assert(a == z and b == 10 and c == 100);

    a, b = (fn () { return foo(); })();
    assert(a == nil and b == nil);

    local X, Y, A;
    foo = fn(x, y, ...) { X = x; Y = y; A = [...]; };
    foo1 = fn(...) { return foo(...); };

    a, b, c = foo1();
    assert(X == nil and Y == nil and len(A) == 0);

    a, b, c = foo1(10);
    assert(X == 10 and Y == nil and len(A) == 0);

    a, b, c = foo1(10, 20);
    assert(X == 10 and Y == 20 and len(A) == 0);

    a, b, c = foo1(10, 20, 30);
    assert(X == 10 and Y == 20 and len(A) == 1 and A[0] == 30);
}


{ /// C-stack overflow while handling C-stack overflow
    local fn infloop() {
        assert(pcall(infloop));
    }
    local err, msg = xpcall(infloop, infloop);
    assert(!err and string.find(msg, "error"));
}



{ /// tail calls x chain of __call
    local n = 10000; /// depth

    local fn foo() {
        if (n == 0)
            return 1023;
        else {
            n = n - 1;
            return foo();
        }
    }

    /// build a chain of __call metamethods ending in function 'foo'
    foreach i in range(0, 15) {
        local ml = [];
        ml[__call] = foo;
        foo = setmetalist(class {}, ml)();
    }

    assert((fn() { return foo(); })() == 1023);
    print("+");
}


{  
    print("testing chains of '__call'");
    local N = 15;
    local u = (class { fn __call(...) { return [...]; } })();
    foreach i in range(0, N) {
        local ml = []; ml[__call] = u;
        u = setmetalist(class {}, ml)();
        u[0] = i;
    }
    local Res = u("a", "b", "c");
    assert(len(Res) == N + 3);
    foreach i in range(0, N)
        assert(Res[i][0] == i);
    assert(Res[N] == "a" and Res[N+1] == "b" and Res[N+2] == "c");

}


a = nil;
(fn(x) { a=x; })(23);
assert(a == 23 and (fn (x) { return x*2; })(20) == 40);


/// testing closures

/// fixed-point operator
local Z = fn(le) {
    local fn a(f) {
        return le(fn(x) { return f(f)(x); });
    };
    return a(a);
};


/// non-recursive factorial
local F = fn(f) {
    return fn(n) {
        if (n == 0) return 1;
        else return n*f(n-1);
    };
};

local fat = Z(F);

assert(fat(0) == 1 and fat(4) == 24 and Z(F)(5)==5*Z(F)(4));

local fn g(z) {
    local fn f(a,b,c,d) {
        return fn(x,y) { return a+b+c+d+a+x+y+z; };
    }
    return f(z,z+1,z+2,z+3);
}

f = g(10);
assert(f(9, 16) == 10+11+12+13+10+9+16+10);

print("+");


/// testing multiple returns

local fn unlpack(l, i) {
    i = i or 0;
    if (i < len(l))
        return l[i], unlpack(l, i+1);
}

local fn equallst(l1, l2) {
  assert(len(l1) == len(l2));
  foreach i in range(0, len(l1))
      assert(l1[i] == l2[i]);
}

local pack = fn(...) { return ([...]); };

f = fn() { return 1,2,30,4; };
local fn ret2(a,b) { return a,b; }

local a,b,c,d = unlpack([1,2,3]);
assert(a==1 and b==2 and c==3 and d==nil);
a = [1,2,3,4,false,10,"alo",false,assert];
equallst(pack(unlpack(a)), a);
equallst(pack(unlpack(a), -1), [1,-1]);
a,b,c,d = ret2(f()), ret2(f());
assert(a==1 and b==1 and c==2 and d==nil);
a,b,c,d = unlpack(pack(ret2(f()), ret2(f())));
assert(a==1 and b==1 and c==2 and d==nil);
a,b,c,d = unlpack(pack(ret2(f()), (ret2(f()))));
assert(a==1 and b==1 and c==nil and d==nil);

a = ret2([unlpack([1,2,3]), unlpack([3,2,1]), unlpack(["a", "b"])]);
assert(a[0] == 1 and a[1] == 3 and a[2] == "a" and a[3] == "b");


/// testing calls with 'incorrect' arguments
rawget((class {})(), "x", 1);
rawset((class {})(), "x", 1, 2);
assert(math.sin(1,2) == math.sin(1));


/// test for generic load
local x = "/// a comment\0\0\0\n  x = 10 + \n23; \
           local a = fn() { x = \"hi\"; }; \
           return \"\0\";";
local fn read1(x) {
    local i = -1;
    return fn() {
        gc();
        i=i+1;
        return string.substr(x, i, i);
    };
}

local fn cannotload(msg, a,b) {
    assert(!a and string.find(b, msg));
}

a = assert(load(read1(x), "modname", __G));
assert(a() == "\0" and __G.x == 33);

a = assert(load(fn() { return nil; }));
a(); /// empty chunk

assert(!load(fn() { return true; }));


{
    local a = [nil, "return ", "3;"];
    f, msg = load(fn() {
            local res = a[0];
            foreach i in range(0, len(a))
            a[i] = a[i+1];
            return res;
            });
    assert(f() == nil); /// should read the empty chunk
}


{
    local f = "return \"01234567890123456789012345678901234567890123456789\";";
    f = load(read1(f));
    assert(f() == "01234567890123456789012345678901234567890123456789");
}


cannotload("unexpected symbol", load(read1("*a = 123")));
cannotload("unexpected symbol", load("*a = 123"));
cannotload("hhi", load(fn() { error("hhi"); }));

{ /// any value is valid for __ENV
    assert(load("return __ENV;", nil, 123)() == 123);
}


///{ /// load when __ENV is not first upvalue
///    local x; XX = 123;
///    local fn h() {
///        local y=x; /// use 'x', so that it becomes 1st upvalue
///        return XX; /// global name
///    }
///    x = load(h, "");
///    assert(debug.getupvalue(x, 2) == "__ENV");
///    debug.setupvalue(x, 2, __G);
///    assert(x() == 123);
///
///    assert(assert(load("return XX + ...", nil, nil, {XX = 13}))(4) == 17);
///    XX = nil;
///}

///-- test generic load with nested functions
///x = [[
///  return fn (x)
///    return fn (y)
///     return fn (z)
///       return x+y+z
///     end
///   end
///  end
///]]
///a = assert(load(read1(x), "read", "t"))
///assert(a()(2)(3)(10) == 15)
///
///-- repeat the test loading a binary chunk
///x = string.dump(a)
///a = assert(load(read1(x), "read", "b"))
///assert(a()(2)(3)(10) == 15)
///
///
///-- test for dump/undump with upvalues
///local a, b = 20, 30
///x = load(string.dump(fn (x)
///  if x == "set" then a = 10+b; b = b+1 else
///  return a
///  end
///end), "", "b", nil)
///assert(x() == nil)
///assert(debug.setupvalue(x, 1, "hi") == "a")
///assert(x() == "hi")
///assert(debug.setupvalue(x, 2, 13) == "b")
///assert(!debug.setupvalue(x, 3, 10))   -- only 2 upvalues
///x("set")
///assert(x() == 23)
///x("set")
///assert(x() == 24)
///
///-- test for dump/undump with many upvalues
///do
///  local nup = 200    -- maximum number of local variables
///  local prog = {"local a1"}
///  for i = 2, nup do prog[#prog + 1] = ", a" .. i end
///  prog[#prog + 1] = " = 1"
///  for i = 2, nup do prog[#prog + 1] = ", " .. i end
///  local sum = 1
///  prog[#prog + 1] = "; return fn () return a1"
///  for i = 2, nup do prog[#prog + 1] = " + a" .. i; sum = sum + i end
///  prog[#prog + 1] = " end"
///  prog = table.concat(prog)
///  local f = assert(load(prog))()
///  assert(f() == sum)
///
///  f = load(string.dump(f))   -- main chunk now has many upvalues
///  local a = 10
///  local h = fn () return a end
///  for i = 1, nup do
///    debug.upvaluejoin(f, i, h, 1)
///  end
///  assert(f() == 10 * nup)
///end
///
///-- test for long method names
///do
///  local t = {x = 1}
///  fn t:_012345678901234567890123456789012345678901234567890123456789 ()
///    return self.x
///  end
///  assert(t:_012345678901234567890123456789012345678901234567890123456789() == 1)
///end
///
///
///-- test for bug in parameter adjustment
///assert((fn () return nil end)(4) == nil)
///assert((fn () local a; return a end)(4) == nil)
///assert((fn (a) return a end)() == nil)
///
///
///print("testing binary chunks")
///do
///  local header = string.pack("c4BBc6BBB",
///    "\27Lua",                                  -- signature
///    0x55,                                      -- version 5.5 (0x55)
///    0,                                         -- format
///    "\x19\x93\r\n\x1a\n",                      -- data
///    4,                                         -- size of instruction
///    string.packsize("j"),                      -- sizeof(lua integer)
///    string.packsize("n")                       -- sizeof(lua number)
///  )
///  local c = string.dump(fn ()
///    local a = 1; local b = 3;
///    local f = fn () return a + b + _ENV.c; end    -- upvalues
///    local s1 = "a constant"
///    local s2 = "another constant"
///    return a + b * 3
///  end)
///
///  assert(assert(load(c))() == 10)
///
///  -- check header
///  assert(string.sub(c, 1, #header) == header)
///  -- check LUAC_INT and LUAC_NUM
///  local ci, cn = string.unpack("jn", c, #header + 1)
///  assert(ci == 0x5678 and cn == 370.5)
///
///  -- corrupted header
///  for i = 1, #header do
///    local s = string.sub(c, 1, i - 1) ..
///              string.char(string.byte(string.sub(c, i, i)) + 1) ..
///              string.sub(c, i + 1, -1)
///    assert(#s == #c)
///    assert(!load(s))
///  end
///
///  -- loading truncated binary chunks
///  for i = 1, #c - 1 do
///    local st, msg = load(string.sub(c, 1, i))
///    assert(!st and string.find(msg, "truncated"))
///  end
///end
///
///
///do   -- check reuse of strings in dumps
///  local str = "|" .. string.rep("X", 50) .. "|"
///  local foo = load(string.format([[
///    local str <const> = "%s"
///    return {
///      fn () return str end,
///      fn () return str end,
///      fn () return str end
///    }
///  ]], str))
///  -- count occurrences of 'str' inside the dump
///  local dump = string.dump(foo)
///  local _, count = string.gsub(dump, str, {})
///  -- there should be only two occurrences:
///  -- one inside the source, other the string itself.
///  assert(count == 2)
///
///  if T then  -- check reuse of strings in undump
///    local funcs = load(dump)()
///    assert(string.format("%p", T.listk(funcs[1])[1]) ==
///           string.format("%p", T.listk(funcs[3])[1]))
///  end
///end
///
///
///do   -- test limit of multiple returns (254 values)
///  local code = "return 10" .. string.rep(",10", 253)
///  local res = {assert(load(code))()}
///  assert(#res == 254 and res[254] == 10)
///
///  code = code .. ",10"
///  local status, msg = load(code)
///  assert(!status and string.find(msg, "too many returns"))
///end
///
///print('OK')
///return deep
