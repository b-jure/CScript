// LOCAL STATEMENTS
local a = 5;
print(a);
// multiple locals with no values
local b, c;
print(b, c);
// set local
a = 69;
print(a);
// set local list
b, c = 69, 69;
print(b, c);
// multiple locals with multiple values
local x, y, z = 420, 420, 420;
print(x, y, z);
// multiple locals with extra values
local _x, _y, _z = 69, 69, 69, 420, 125;
print(_x, _y, _z);


// HASHTABLES
local g = {};
print(g);
// set some fields
g.x = 1;
g.y = 1;
g.z = 1;
print(g.x, g.y, g.z);
// set fields by indexing
g["x"] = 2;
g["y"] = 2;
g["z"] = 2;
g["u"] = 2;
print(g["x"], g["y"], g["z"], g["u"]);
// new table from constructor using names as fields
g = {
    cat = true,
    farm = {
        cow = 2,
        fox = 1,
        chicken = 4,
    }
};
print(g["cat"], g["farm"], g.farm.cow, g.farm.fox, g.farm.chicken);
// new table from constructor using indices as fields
g = {
    ["cat"] = false,
    ["animals"] = {
        ["cow"] = 4,
        ["fox"] = 8,
        ["chicken"] = 15,
    }
};
print(g["cat"], g["animals"], g.animals.cow, g.animals.fox, g.animals.chicken);


// ARRAYS
local h = [];
print(h);
// set some indices
h[0] = 1;
h[1] = 1;
h[2] = 1;
print(h[0], h[1], h[2]);
// set indices but create holes
h[4] = 2;
h[7] = 2;
h[9] = 2;
print(h[3], h[4], h[5], h[6], h[7], h[8], h[9]);
// new array from constructor
h = [
    15,
    15.2,
    13,
    [69, 69, 69],
];
print(h[0], h[1], h[2], h[3]);
// out of bounds access
print(h[4]);


// FLOATS
// decimal
print(1.0);
print(1000.);
print(3.14159);
print(.05);
print(.0005);
print(1e0);
print(1.0000e0);
print(100e1);
print(100e+1);
print(100E+1);
print(100E+1);
print(1e3);
print(10000e-1);
print(3.14159e0);
print(5e-2);
print(.0005e+2);
print(5E-2);
print(.0005E2);
print(.05e-2);
// hexadecimal
print(0x2.0Bp4);    # 32.6875 decimal
print(0xE.2p3);     # 113 decimal
print(0x123.ABCp0); # 291.6708984375 in decimal
print(0x123.ABCp4); # 4666.734375 in decimal
print(0xEP-15);     # 0.000427246


// INTEGERS
// decimal
print(1);
print(1____);
print(120);
print(981);
print(100_500_300);
print(100__500___300);
print(15e15);
print(15E-15);
print(1E-01_2_);
print(15e00001);
// hexadecimal
print(0x1);             # 1 in decimal
print(0x1__);           # 1 in decimal
print(0x78);            # 120 in decimal
print(0x3D5);           # 981 in decimal
print(0x5fd834c);       # 100500300 in decimal
print(0x5f__d8___34c);  # 100500300 in decimal
print(0xEp15);          # 458752 in decimal
print(0xEp1);           # 28 in decimal
print(0xEp-1);          # 7 in decimal
print(0xAp2);           # 40 in decimal
print(0xAp-1);          # 5 in decimal
print(0x100p-8);        # 1 in decimal
print(0x10p-4);         # 1 in decimal
print(0x1p+4);          # 16 in decimal
print(0x1p+8);          # 256 in decimal
// octal
print(0015);            # 13 in decimal
print(032);             # 26 in decimal
print(0157);            # 111 in decimal
print(0123_570);        # 42872 in decimal


// STRINGS
print("test");              # string
print("test");              # (check reuse of interned strings)
print("");                  # empty string
print("start\0end");        # null terminator
print("start\aend");        # bell
print("start\bend");        # backspace
print("start\tend");        # horizontal tab
print("start\nend");        # new line
print("start\vend");        # vertical tab
print("start\fend");        # form feed
print("start\rend");        # carriage return
print("start\e[1Kend");     # escape character (equivalent to '\x1B')
print("start\x20end");      # \xhh, h is a hexadecimal digit
print("start\u{57}end");    # \u{hhhhhhhh}, h is a hexadecimal digit (normalized UTF-8)
print("start\u[57]end");    # \u[hhhhhhhh], h is a hexadecimal digit (verified UTF-8)
print("start\"end");        # double quotation mark (22 in hexadecimal)
print("start\'end");        # apostrophe (27 in hexadecimal)
print("start\\end");        # backslash (5C in hexadecimal)
print("start\
end");                      # escaped newline/carriage return
print("start\69end");       # \ddd, d is a decimal digit
